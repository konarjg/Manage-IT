@page
@using EFModeling.EntityProperties.DataAnnotations.Annotations;
@using System.Text.Json;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@Html.AntiForgeryToken()  
@model Calendar
@{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Manage IT | Main</title>
        <link rel="icon" href=@Href("Graphics/logo.png") />
        <meta name="description" content="A convenient IT Project management tool for both managers and employees." />
        <meta name="keywords" content="management, IT, programming, project, www, programmer" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="author" content="Bosnian IT Management Inc." />
        <link rel="stylesheet" href="~/Calendar.css" type="text/css" />
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <!--Because Razor adds a scope identifier and a helper tag,
        body needs to be styled in the style tag as per
        https://github.com/dotnet/aspnetcore/issues/41580-->
        <style>
            body {
                width: 100vw;
                height: 100vh;
                margin: 0px;
                background: linear-gradient(#000000, #000040);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
        </style>

        <script>
            function mouseClick(element, event, date) 
            {
                if (event.type == 'click')
                {
                    event.preventDefault();
                                        
                    if (!element.classList.contains("activeDay"))
                    {
                        var active = document.getElementsByClassName("activeDay");
                        
                        for (var i = 0; i < active.length; i++)
                        {
                            active[i].classList.remove("activeDay");
                        }

                        element.classList.add("activeDay");

                        $.ajax({
                            type: "POST",
                            url: "/Calendar?handler=SetActiveDate",
                            data: { date: date },
                            beforeSend: function (xhr) {  
                                xhr.setRequestHeader("XSRF-TOKEN",  
                                    $('input:hidden[name="__RequestVerificationToken"]').val());  
                            },  
                            success: function(response) {
                                if (response.success) {
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                alert("error");
                            }
                        });
                    }
                    else
                    {
                        element.classList.remove("activeDay");

                        $.ajax({
                            type: "POST",
                            url: "/Calendar?handler=UnsetActiveDate",
                            beforeSend: function (xhr) {  
                                xhr.setRequestHeader("XSRF-TOKEN",  
                                    $('input:hidden[name="__RequestVerificationToken"]').val());  
                            },  
                            success: function(response) {
                                if (response.success) {
                                    window.location.reload();
                                }
                            },
                            error: function() {
                                alert("error");
                            }
                        });
                    }
                }
            }

            function showCalendar()
            {
                document.getElementsByClassName("calendar")[0].style.display = 'table';
                document.getElementsByClassName("meetingEditBox")[0].style.display = 'none';
                document.getElementsByClassName("meetingInfoBox")[0].style.display = 'none';
                document.getElementsByClassName("calendar")[0].style.opacity = 1;
            }

            function showEditMenu()
            {
                document.getElementsByClassName("calendar")[0].style.display = 'none';
                document.getElementsByClassName("meetingEditBox")[0].style.display = 'none';
                document.getElementsByClassName("meetingInfoBox")[0].style.display = 'block';
                document.getElementsByClassName("meetingInfoBox")[0].style.opacity = 1;
            }

            function showUpdateMenu()
            {
                document.getElementsByClassName("calendar")[0].style.display = 'none';
                document.getElementsByClassName("meetingInfoBox")[0].style.display = 'none';
                document.getElementsByClassName("meetingEditBox")[0].style.display = 'flex';
                document.getElementsByClassName("meetingEditBox")[0].style.opacity = 1;
            }

            function editMeeting(meetingId)
            {
                $.ajax({
                    type: "POST",
                    url: "/Calendar?handler=SetEditedMeetingId",
                    data: { id: meetingId },
                    beforeSend: function (xhr) {  
                        xhr.setRequestHeader("XSRF-TOKEN",  
                            $('input:hidden[name="__RequestVerificationToken"]').val());  
                    },  
                    success: function(response) {
                        if (response.success) {
                            window.location.reload();
                        }
                    },
                    error: function() {
                        alert("error");
                    }
                });
            }

            function back() {
                $.ajax({
                    type: "POST",
                    url: "/Calendar?handler=UnsetEditedMeetingId",
                    beforeSend: function (xhr) {  
                        xhr.setRequestHeader("XSRF-TOKEN",  
                            $('input:hidden[name="__RequestVerificationToken"]').val());  
                    },  
                    success: function(response) {
                        if (response.success) {
                            window.location.reload();
                        }
                    },
                    error: function() {
                        alert("error");
                    }
                });
            }

            function editBack() {
                $.ajax({
                    type: "POST",
                    url: "/Calendar?handler=EditBack",
                    beforeSend: function (xhr) {  
                        xhr.setRequestHeader("XSRF-TOKEN",  
                            $('input:hidden[name="__RequestVerificationToken"]').val());  
                    },  
                    success: function(response) {
                        if (response.success) {
                            window.location.reload();
                        }
                    },
                    error: function() {
                        alert("error");
                    }
                });
            }

            function deleteMeeting(meetingId) {
                var result = confirm("Do you really want to delete this meeting?");

                if (result) {
                    $.ajax({
                        type: "POST",
                        url: "/Calendar?handler=DeleteMeeting",
                        data: { id: meetingId },
                        beforeSend: function (xhr) {  
                            xhr.setRequestHeader("XSRF-TOKEN",  
                                $('input:hidden[name="__RequestVerificationToken"]').val());  
                        },  
                        success: function(response) {
                            if (response.success) {
                                window.location.reload();
                            }
                        },
                        error: function() {
                            alert("error");
                        }
                    });
                } 
            }

             function edit(meetingId) {
                $.ajax({
                    type: "POST",
                    url: "/Calendar?handler=EditMeeting",
                    data: { id: meetingId },
                    beforeSend: function (xhr) {  
                        xhr.setRequestHeader("XSRF-TOKEN",  
                            $('input:hidden[name="__RequestVerificationToken"]').val());  
                    },  
                    success: function(response) {
                        if (response.success) {
                            window.location.reload();
                        }
                    },
                    error: function() {
                        alert("error");
                    }
                });
            }

            function save(meetingId, projectId, date, name, description) {
                $.ajax({
                    type: "POST",
                    url: "/Calendar?handler=UpdateMeeting",
                    data: { meetingId: meetingId, projectId: projectId, date: date, name: name, description: description },
                    beforeSend: function (xhr) {  
                        xhr.setRequestHeader("XSRF-TOKEN",  
                            $('input:hidden[name="__RequestVerificationToken"]').val());  
                    },  
                    success: function(response) {
                        if (response.success) {
                            window.location.reload();
                        } else {
                            alert("Could not edit the meeting!");
                        }
                    },
                    error: function() {
                        alert("error");
                    }
                });
            }
        </script>

        @if (HttpContext.Session.Keys.Contains("EditedMeetingId"))
        {
            if (HttpContext.Session.Keys.Contains("EditId"))
            {
                <script>
                    window.onload = function() { 
                        showUpdateMenu();
                    }
                </script>
            }
            else
            {
                <script>
                    window.onload = function() { 
                        showEditMenu();
                    }
                </script>
            }
        }
        else
        {
            <script>
                window.onload = function() { 
                    showCalendar();
                }
            </script>
        }
    </head>

    <body>
        <header>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
            <div class="topnav">
                <a class="active" href=@Href("~/")><i class="fa fa-fw fa-home"></i> Home</a>
                <a href="#"><i class="fa fa-fw fa-download"></i> Downloads</a>
                <a href="#"><i class="fa fa-fw fa-question"></i>About</a>
                <div class="topnav-right">
                    @if (HttpContext.Session.Get<User>("User").Admin)
                    {
                        <a href=@Href("~/AdminPanel")><i class="fa fa-fw fa-cog"></i>Admin Panel</a>
                    }

                    <a href=@Href("~/AccountManagement")><i class="fa fa-fw fa-user-circle"></i>My Account</a>
                    <a href=@Href("~/Chat")><i class="fa fa-fw fa-commenting"></i>Chat</a>
                    <a href=@Href("~/Calendar")><i class="fa fa-fw fa-calendar"></i>Calendar</a>
                    <a href=@Href("~/LogOut")><i class="fa fa-fw fa-sign-out"></i>Log Out</a>
                </div>

            </div>
        </header>

        @{
            var getDate = Model.Date;

            var firstDayOfTheMonth = new DateTime(getDate.Year, getDate.Month, 1);
            var lastDayOfTheMonth = firstDayOfTheMonth.AddMonths(1).AddDays(-1);

            var numberOfDays = Convert.ToInt16(lastDayOfTheMonth.ToString("dd"));
        }

        <div class="calendarContent">
            <table class="calendar">
                <thead>
                    <tr class="row">
                        <th></th>
                        <th></th>
                        <th><a href=@Href("~/Calendar?action=previous") class="changeMonth"><i class="fa fa-fw fa-arrow-left"></i></a></th>
                        <th>@Model.GetMonthName(getDate.Month) @getDate.Year</th>
                        <th><a href=@Href("~/Calendar?action=next") class="changeMonth"><i class="fa fa-fw fa-arrow-right"></i></a></th>
                    </tr>
                    <tr>
                        <th>Mon</th>
                        <th>Tue</th>
                        <th>Wed</th>
                        <th>Thu</th>
                        <th>Fri</th>
                        <th>Sat</th>
                        <th>Sun</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        @{

                            var startDate = firstDayOfTheMonth.AddDays((int)DayOfWeek.Monday - (int)firstDayOfTheMonth.DayOfWeek); 
                            if (startDate > firstDayOfTheMonth) 
                            { 
                                startDate = startDate.AddDays(-7); 
                            } 

                            for (int i = 0; i < 42; i++) 
                            { 
                                DateTime date = startDate.AddDays(i);
                                DateTime activeDate = HttpContext.Session.Get<DateTime>("ActiveDate");
                                string active = "activeDay";

                                if (activeDate == DateTime.MinValue || activeDate.Year != date.Year
                                    || activeDate.Month != date.Month || activeDate.Day != date.Day)
                                {
                                    active = "";
                                }

                                if (i % 7 == 0 && i > 0) 
                                {
                                    @:</tr><tr> 
                                }

                                int meetingCount = 0;
                                int taskCount = 0;
                                string id = "";

                                if (date.Year == DateTime.Now.Year && date.Month == DateTime.Now.Month 
                                    && date.Day == DateTime.Now.Day)
                                {
                                    id = "today";
                                }

                                foreach (var meeting in Model.Meetings)
                                {
                                    if (meeting.Date.Year != date.Year || meeting.Date.Month != date.Month || meeting.Date.Day != date.Day)
                                    {
                                        continue;
                                    }

                                    meetingCount++;
                                }

                                string day = $"{date.Day}";

                                if (day.Length == 1)
                                {
                                    day = "0" + day;    
                                }

                                var content = Html.Raw(day);

                                if (date.Month != getDate.Month)
                                {
                                    if (meetingCount != 0 || taskCount != 0)
                                    {
                                        <td>
                                            <span class="lastMonthMeetingContent @active" onclick="mouseClick(this, event, '@date.ToString()')">@content</span><br>
                                        </td>
                                        continue;
                                    }

                                    <td>
                                        <span id="@id" class="lastMonthContent @active" onclick="mouseClick(this, event, '@date.ToString()')">@content</span>
                                    </td>
                                }
                                else
                                {
                                    if (meetingCount != 0 || taskCount != 0)
                                    {
                                        <td>
                                            <span class="thisMonthMeetingContent @active" onclick="mouseClick(this, event, '@date.ToString()')">@content</span>
                                        </td>

                                        continue;
                                    }

                                    <td>
                                        <span id="@id" class="thisMonthContent @active" onclick="mouseClick(this, event, '@date.ToString()')">@content</span><br>
                                    </td>
                                }
                            }
                        }
                    </tr>
                </tbody>
            </table>

            <div class="meetingEditBox">
                @if (HttpContext.Session.Keys.Contains("EditId"))
                {
                    var id = HttpContext.Session.Get<long>("EditId");
                    var meeting = Model.Meetings.Where(m => m.MeetingId == id).First();
                    

                    <div class="meetingEditTop">
                        <span class="backButton" onclick="editBack()"><i class="fa fa-fw fa-arrow-left"></i></span>
                    </div>

                    <div class="meetingEditDescription">
                        <label class="editLabel">Name</label>
                        <textarea id="editNameField" style="resize:none;" rows="1" cols="60" class="editInput">@meeting.Title</textarea>
                        <label class="editLabel">Description</label>
                        <textarea id="editDescriptionField" style="resize:none;" rows="30" cols="60" class="editInput">@meeting.Description</textarea>
                        <button class="editButton" onclick="save('@id', '@meeting.ProjectId', '@meeting.Date.ToString()', document.getElementById('editNameField').value, document.getElementById('editDescriptionField').value)">Save</button>
                    </div>
                }
            </div>

            <div class="meetingInfoBox">
                @if (HttpContext.Session.Keys.Contains("EditedMeetingId"))
                {
                    var id = HttpContext.Session.Get<long>("EditedMeetingId");
                    var meeting = Model.Meetings.Where(m => m.MeetingId == id).First();
                    Project project = new();
                    @ProjectManager.Instance.GetProject(meeting.ProjectId, out project);

                    <div class="meetingInfoTop">
                        <span class="backButton" onclick="back()"><i class="fa fa-fw fa-arrow-left"></i></span>
                        <span><i>@meeting.Title</i></span>
                    </div>

                    <div class="meetingButtons">
                        <button class="deleteButton" onclick="edit('@id.ToString()')">Edit</button>
                        <button class="deleteButton" onclick="deleteMeeting('@id.ToString()')">Delete</button>
                    </div>

                    <div class="meetingInfoDescription">            
                        <span>Project: @project.Name</span>
                        <span>Description:</span>
                        <span id="meetingDescription">@meeting.Description</span>
                    </div>
                }
            </div>

            <div class="dayInfoBox">
                @{
                    {
                        var date = HttpContext.Session.Get<DateTime>("ActiveDate");
                        var year = date.Year.ToString();
                        var month = Model.GetMonthName(date.Month);
                        var day = date.Day;

                        var title = $"{month} {day} {year}";

                        <div class="dateInfo">@title</div>
                        int count = 0;

                        foreach (var meeting in Model.Meetings)
                        {
                            if (meeting.Date.Year != date.Year || meeting.Date.Month != date.Month || meeting.Date.Day != date.Day)
                            {
                                continue;
                            }

                            <div class="meetingInfo">Meeting: @meeting.Title <span class="meetingEdit" onclick="editMeeting('@meeting.MeetingId.ToString()')"><i class="fa fa-fw fa-ellipsis-v"></i></span></div>
                            count++;
                        }

                        if (count == 0)
                        {
                             <p class="emptyInfo">Empty</p>   
                        }
                    }
                }
            
            </div>
        </div>

        <footer>
            <div class="bottomnavbar">
                <a href="#feedback">Feedback</a>
                <a href="#ToS">Terms of Service</a>
                <a href="#privacy-policy">Privacy policy</a>
            </div>
        </footer>
    </body>
    </html>
}
